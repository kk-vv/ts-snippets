{
  "Zustand Store with Immer": {
    "prefix": "zus",
    "body": [
      "import { create } from 'zustand'",
      "import { immer } from 'zustand/middleware/immer'",
      "",
      "interface States {",
      "  count: number",
      "}",
      "",
      "const initialStates: States = {",
      "  count: 0,",
      "}",
      "",
      "interface Actions {",
      "  onIncrease: () => void",
      "  onReset: () => void",
      "}",
      "",
      "const use${1:Count}Store = create<States & Actions>()(",
      "  immer((set, get) => ({",
      "    ...initialStates,",
      "    onIncrease: () => {",
      "      set((state) => {",
      "        state.count += 1",
      "      })",
      "    },",
      "    onReset() {",
      "      set({ ...initialStates })",
      "    },",
      "  }))",
      ")",
      "",
      "export default use${1:Count}Store"
    ],
    "description": "Creates a Zustand store with Immer middleware, with customizable store name.",
    "scope": "javascript,typescript"
  },
  "Zustand Factory Store with Immer": {
    "prefix": "zusfact",
    "body": [
      "import { create } from 'zustand'",
      "import { immer } from 'zustand/middleware/immer'",
      "",
      "interface States {",
      "  count: number",
      "}",
      "",
      "interface Actions {",
      "  onIncrease: () => void",
      "  onReset: () => void",
      "}",
      "",
      "const createStore = (initialStates: States) => {",
      "  return create<States & Actions>()(",
      "    immer((set, get) => ({",
      "      ...initialStates,",
      "      onIncrease: () => {",
      "        set((state) => {",
      "          state.count += 1",
      "        })",
      "      },",
      "      onReset() {",
      "        set({ ...initialStates })",
      "      },",
      "    }))",
      "  )",
      "}",
      "",
      "export const use${1:Count}Store1 = createStore({ count: 1 })",
      "export const use${1:Count}Store2 = createStore({ count: 100 })"
    ],
    "description": "Creates a Zustand store with Immer middleware using a factory function, with customizable store names.",
    "scope": "javascript,typescript"
  },
  "Zustand Persist Store with Immer": {
    "prefix": "zuspst",
    "body": [
      "import { create } from 'zustand'",
      "import { createJSONStorage, persist } from 'zustand/middleware'",
      "import { immer } from 'zustand/middleware/immer'",
      "",
      "interface States {",
      "  count: number",
      "}",
      "",
      "const initialStates: States = {",
      "  count: 0,",
      "}",
      "",
      "interface Actions {",
      "  onIncrease: () => void",
      "  onReset: () => void",
      "}",
      "",
      "const use${1:Count}Store = create<States & Actions>()(",
      "  persist(",
      "    immer((set, get) => ({",
      "      ...initialStates,",
      "      onIncrease: () => {",
      "        set((state) => {",
      "          state.count += 1",
      "        })",
      "      },",
      "      onReset() {",
      "        set({ ...initialStates })",
      "      },",
      "    })),",
      "    {",
      "      name: 'storage_key_${1:Count}',",
      "      storage: createJSONStorage(() => localStorage), // default: localStorage, or sessionStorage or custom via StateStorage",
      "    }",
      "  )",
      ")",
      "",
      "export default use${1:Count}Store"
    ],
    "description": "Creates a persistent Zustand store with Immer middleware and a customizable name (e.g., useTodoStore), including a counter with onIncrease and onReset actions. Persists to localStorage.",
    "scope": "javascript,typescript,typescriptreact"
  },
  "React Context": {
    "prefix": "usectx",
    "body": [
      "\"use client\"",
      "import React, { createContext, useCallback, useContext, useState } from \"react\"",
      "",
      "interface States {",
      "  count: number",
      "}",
      "",
      "interface Actions {",
      "  onIncrease: () => void",
      "  onReset: () => void",
      "}",
      "",
      "type ${1:Count}ContextType = States & Actions",
      "",
      "const ${1:Count}Context = createContext<${1:Count}ContextType | undefined>(undefined)",
      "",
      "export const ${1:Count}Provider = ({ children }: { children: React.ReactNode }) => {",
      "  const [count, setCount] = useState<number>(0)",
      "  const onIncrease = useCallback(() => {",
      "    setCount(oldValue => { return oldValue + 1 })",
      "  }, [])",
      "  const onReset = useCallback(() => {",
      "    setCount(0)",
      "  }, [])",
      "",
      "  return (",
      "    <${1:Count}Context.Provider",
      "      value={{",
      "        count,",
      "        onIncrease,",
      "        onReset,",
      "      }}",
      "    >",
      "      {children}",
      "    </${1:Count}Context.Provider>",
      "  )",
      "}",
      "",
      "export const use${1:Count}Context = () => {",
      "  const context = useContext(${1:Count}Context)",
      "  if (!context) {",
      "    throw new Error(\"use${1:Count}Context must be used within an ${1:Count}Provider\")",
      "  }",
      "  return context",
      "}"
    ],
    "description": "Creates a React Context for with a customizable name (e.g., useTodoContext).",
    "scope": "javascript,typescript,typescriptreact"
  },
  "React Context with Reducer": {
    "prefix": "userdctx",
    "body": [
      "\"use client\"",
      "import React, { createContext, useCallback, useContext, useMemo, useReducer } from \"react\"",
      "",
      "interface States {",
      "  count: number",
      "  status: 'idle' | 'loading' | 'success' | 'error'",
      "  error: string | null",
      "}",
      "",
      "interface Actions {",
      "  onFetchData: () => Promise<void>",
      "  onResetAll: () => void",
      "}",
      "",
      "type Action =",
      "  | { type: 'INCREMENT_COUNT'; payload: number }",
      "  | { type: 'RESET' }",
      "  | { type: 'SET_STATUS'; payload: States['status'] }",
      "  | { type: 'SET_ERROR'; payload: string | null }",
      "",
      "type ${1:Count}ContextType = States & Actions",
      "",
      "const initialStates: States = {",
      "  count: 0,",
      "  status: 'idle',",
      "  error: null,",
      "}",
      "",
      "const reducer = (state: States, action: Action) => {",
      "  switch (action.type) {",
      "    case \"INCREMENT_COUNT\":",
      "      return { ...state, count: state.count + action.payload }",
      "    case \"RESET\":",
      "      return { ...initialStates }",
      "    case \"SET_STATUS\":",
      "      return { ...state, status: action.payload }",
      "    case \"SET_ERROR\":",
      "      return { ...state, error: action.payload }",
      "  }",
      "}",
      "",
      "const ${1:Count}Context = createContext<${1:Count}ContextType | undefined>(undefined)",
      "",
      "export const ${1:Count}Provider = ({ children }: { children: React.ReactNode }) => {",
      "  const [state, dispatch] = useReducer(reducer, initialStates)",
      "",
      "  const onFetchData = useCallback(async () => {",
      "    dispatch({ type: 'SET_STATUS', payload: 'loading' })",
      "    try {",
      "      // simulate",
      "      await new Promise((r) => setTimeout(r, 1500))",
      "      dispatch({ type: 'INCREMENT_COUNT', payload: 20 })",
      "      dispatch({ type: 'SET_STATUS', payload: 'success' })",
      "    } catch {",
      "      dispatch({ type: 'SET_STATUS', payload: 'error' })",
      "      dispatch({ type: 'SET_ERROR', payload: 'failed to fetch data' })",
      "    }",
      "  }, [])",
      "",
      "  const onResetAll = useCallback(() => {",
      "    dispatch({ type: 'RESET' })",
      "  }, [])",
      "",
      "  const value = useMemo(() => (",
      "    {",
      "      ...state,",
      "      onFetchData,",
      "      onResetAll,",
      "    }",
      "  ), [state, onFetchData, onResetAll])",
      "",
      "  return <${1:Count}Context.Provider value={value}>{children}</${1:Count}Context.Provider>",
      "}",
      "",
      "export const use${1:Count}Context = () => {",
      "  const context = useContext(${1:Count}Context)",
      "  if (!context) {",
      "    throw new Error(\"use${1:Count}Context must be used within an ${1:Count}Provider\")",
      "  }",
      "  return context",
      "}"
    ],
    "description": "Creates a React Context with useReducer for a counter with a customizable name (e.g., useTodoContext), including onFetchData and onResetAll actions.",
    "scope": "javascript,typescript,typescriptreact"
  }
}