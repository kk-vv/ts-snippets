{
  "Zustand Store with Immer": {
    "prefix": "zus",
    "body": [
      "import { create } from 'zustand'",
      "import { immer } from 'zustand/middleware/immer'",
      "",
      "interface States {",
      "  count: number",
      "}",
      "",
      "const initialStates: States = {",
      "  count: 0,",
      "}",
      "",
      "interface Actions {",
      "  onIncrease: () => void",
      "  onReset: () => void",
      "}",
      "",
      "const use${1:Count}Store = create<States & Actions>()(",
      "  immer((set, get) => ({",
      "    ...initialStates,",
      "    onIncrease: () => {",
      "      set((state) => {",
      "        state.count += 1",
      "      })",
      "    },",
      "    onReset() {",
      "      set({ ...initialStates })",
      "    },",
      "  }))",
      ")",
      "",
      "export default use${1:Count}Store"
    ],
    "description": "Creates a Zustand store with Immer middleware, with customizable store name.",
    "scope": "javascript,typescript"
  },
  "Zustand Factory Store with Immer": {
    "prefix": "zusfact",
    "body": [
      "import { create } from 'zustand'",
      "import { immer } from 'zustand/middleware/immer'",
      "",
      "interface States {",
      "  count: number",
      "}",
      "",
      "interface Actions {",
      "  onIncrease: () => void",
      "  onReset: () => void",
      "}",
      "",
      "const createStore = (initialStates: States) => {",
      "  return create<States & Actions>()(",
      "    immer((set, get) => ({",
      "      ...initialStates,",
      "      onIncrease: () => {",
      "        set((state) => {",
      "          state.count += 1",
      "        })",
      "      },",
      "      onReset() {",
      "        set({ ...initialStates })",
      "      },",
      "    }))",
      "  )",
      "}",
      "",
      "export const use${1:Count}Store1 = createStore({ count: 1 })",
      "export const use${1:Count}Store2 = createStore({ count: 100 })"
    ],
    "description": "Creates a Zustand store with Immer middleware using a factory function, with customizable store names.",
    "scope": "javascript,typescript"
  }
}